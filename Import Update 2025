Option Explicit

' Constants for column in inventory
Private Const COLUMN_INVENTORY_ITEM_CLASS As Integer = 1
Private Const COLUMN_INVENTORY_ITEM_CODE As Integer = 2
Private Const COLUMN_INVENTORY_ITEM_BARCODE As Integer = 3
Private Const COLUMN_INVENTORY_ITEM_NAME As Integer = 4
Private Const COLUMN_INVENTORY_ITEM_UNIT As Integer = 5
Private Const COLUMN_INVENTORY_STOCK_PRICE_BEGIN As Integer = 10
Private Const COLUMN_INVENTORY_VN_PRICE As Integer = 13
Private Const COLUMN_INVENTORY_FOREIGN_PRICE As Integer = 14
Private Const COLUMN_INVENTORY_REMAINING_STOCK As Integer = 16
Private Const COLUMN_INVENTORY_STOCK_PRICE_END As Integer = 17

'Constants for column in import
Private Const COLUMN_IMPORT_DATE As Integer = 1
Private Const COLUMN_IMPORT_DATE_UPDATE As Integer = 2
Private Const COLUMN_IMPORT_ITEM_CLASS As Integer = 3
Private Const COLUMN_IMPORT_ITEM_CODE As Integer = 4
Private Const COLUMN_IMPORT_ITEM_BARCODE As Integer = 5
Private Const COLUMN_IMPORT_ITEM_NAME As Integer = 6
Private Const COLUMN_IMPORT_ITEM_UNIT As Integer = 7
Private Const COLUMN_IMPORT_QUANTITY As Integer = 8
Private Const COLUMN_IMPORT_UNIT_PRICE As Integer = 9
Private Const COLUMN_IMPORT_STATUS As Integer = 11
Private Const IMPORT_STATUS_NOT_UPDATE As Integer = 15

Private inventoryData As Variant ' Global variable to store inventory data
Private cartDict As Object
Private barcode As String


Private Sub UserForm_Initialize()
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets(1) ' Replace "Sheet3" with the name of your worksheet

    ' Initialize the cart dictionary
    Set cartDict = CreateObject("Scripting.Dictionary")

    Dim lastRow As Long
    lastRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row
    
    Dim classificationRange As Range
    Set classificationRange = ws.Range("A2:A" & lastRow)
    
    Me.cmbItemClass.Clear ' Clear any existing items
    
    Dim cell As Range
    For Each cell In classificationRange
        Me.cmbItemClass.AddItem cell.Value
    Next cell
    
    ' Add options to the ComboBox
    Me.cmbMultiplier.AddItem "(ngan)"
    Me.cmbMultiplier.AddItem "(trieu)"
    
    ' Add "Other" as an option in the ComboBox
    'Me.cmbItemClass.AddItem "KHÁC"
    
    SetupListBox
    LoadInventoryData
End Sub
Private Sub SetupListBox()
    With listCart
        .ColumnCount = 4
        .ColumnWidths = "230;60;70;80"
    End With
End Sub
Private Sub LoadInventoryData()
    ' Get the path to the inventory file
    Dim inventoryPath As String
    inventoryPath = ThisWorkbook.Path & "\Minimart 69 - 2025 - Hang ton kho.xlsm"

    ' Open the inventory workbook
    Dim inventoryWorkbook As Workbook
    Set inventoryWorkbook = Workbooks.Open(inventoryPath)

    ' Set the inventory data array
    inventoryData = inventoryWorkbook.Sheets(1).Range("A6:S" & _
        inventoryWorkbook.Sheets(1).Cells(inventoryWorkbook.Sheets(1).Rows.Count, 1).End(xlUp).Row).Value

    ' Close the inventory workbook
    'inventoryWorkbook.Close SaveChanges:=False
End Sub
Private Sub FindButton_Click()
    ' Validate if the search term is entered
    If Me.txtFindItem.Value = "" Then
        MsgBox "Error 1: Please fill in all the information"
        Exit Sub
    End If

    ' Get the search term entered by the user
    Dim searchItem As String
    searchItem = Me.txtFindItem.Value
    
    ' Find the item details in the imported inventory data
    Dim matchingItems As Collection ' Use a collection to store matching item names
    Set matchingItems = New Collection
    
    Dim i As Long
    For i = LBound(inventoryData, 1) To UBound(inventoryData, 1)
        If InStr(1, inventoryData(i, COLUMN_INVENTORY_ITEM_NAME), searchItem, vbTextCompare) > 0 Then
            ' Partial match found, add the item name to the collection
            On Error Resume Next ' Ignore errors if the same name is added more than once
            matchingItems.Add inventoryData(i, COLUMN_INVENTORY_ITEM_NAME)
            On Error GoTo 0
        End If
    Next i
    
    If matchingItems.Count = 0 Then
        ' Item not found
        MsgBox "Error 2: Item not found!"
                
    Else
        
        ' Item found
        ' Clear existing items in cmbItemName
        Me.cmbItemName.Clear
        
        ' Populate cmbItemName combo box with matching item names
        Dim itemName As Variant
        For Each itemName In matchingItems
            Me.cmbItemName.AddItem itemName
        Next itemName
        
        ' Set the first matching item as the selected item in cmbItemName
        Me.cmbItemName.ListIndex = 0
        
        ' Update corresponding fields based on the selected item
        UpdateFieldsForSelectedName
    End If

    ' Enable the submit button
    Me.Findbutton.Enabled = True
End Sub
Private Sub cmbItemName_Change()
    ' Update corresponding fields based on the selected item in cmbItemName
    UpdateFieldsForSelectedName
End Sub
Private Sub UpdateFieldsForSelectedName()
    ' Get the selected item name from cmbItemName
    Dim selectedName As String
    selectedName = Me.cmbItemName.Value

    Dim i As Long
    For i = LBound(inventoryData, 1) To UBound(inventoryData, 1)
        If InStr(1, inventoryData(i, COLUMN_INVENTORY_ITEM_NAME), selectedName, vbTextCompare) > 0 Then
            ' Item found
            ' Update corresponding fields
            Me.cmbItemClass.Value = inventoryData(i, COLUMN_INVENTORY_ITEM_CLASS)
            Me.txtItemCode.Value = inventoryData(i, COLUMN_INVENTORY_ITEM_CODE)
            Me.txtPrice.Value = Format(inventoryData(i, COLUMN_INVENTORY_STOCK_PRICE_END), "#,###.#0")
            Me.txtDonVi.Value = inventoryData(i, COLUMN_INVENTORY_ITEM_UNIT)
            Exit For
        End If
    Next i

End Sub
Function ExtractNumericPart(inputString As String) As String
    Dim numericPart As String
    Dim i As Integer
    
    numericPart = ""
    
    ' Iterate through each character in the input string
    For i = 1 To Len(inputString)
        ' Check if the character is a numeric digit
        If IsNumeric(Mid(inputString, i, 1)) Then
            ' Append the numeric digit to the numeric part string
            numericPart = numericPart & Mid(inputString, i, 1)
        End If
    Next i
    
    ' Return the extracted numeric part as a string
    ExtractNumericPart = numericPart
End Function
Private Sub txtBarcode_Change()
    barcode = Trim(Me.txtBarcode.Value) ' Store the barcode in a module-level variable
    
    If barcode = "" Then Exit Sub
    If UBound(inventoryData) = 0 Then LoadInventoryData

    ' Introduce a delay using a loop
    Dim startTime As Double
    startTime = Timer ' Get the current time in seconds

    ' Wait for 0.25 seconds while allowing other events to process
    Do While Timer < startTime + 0.25
        DoEvents ' Allow other events to be processed
    Loop

    ' Call the barcode processing function
    ProcessBarcode
End Sub
Public Sub ProcessBarcode()
    Dim foundItem As Boolean
    foundItem = False
    Dim i As Integer
    Dim itemName As String, totalPayment As Double
    Dim classification As String
    Dim itemCode As String
    Dim itemBarcode As String
    Dim price As Double
    Dim quantity As Integer
    Dim donVi As String
    Dim status As String
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets(1)
    
    For i = LBound(inventoryData, 1) To UBound(inventoryData, 1)
        If Trim(inventoryData(i, COLUMN_INVENTORY_ITEM_BARCODE)) = barcode Then
            itemName = inventoryData(i, COLUMN_INVENTORY_ITEM_NAME)
            Dim stockPrice As Double
            Dim remainingStock As Double
            Dim importQuantity As Double
            
            itemCode = inventoryData(i, COLUMN_INVENTORY_ITEM_CODE)
            importQuantity = 1
            stockPrice = IIf(IsEmpty(inventoryData(i, COLUMN_INVENTORY_STOCK_PRICE_BEGIN)), _
                             CDbl(inventoryData(i, COLUMN_INVENTORY_STOCK_PRICE_END)), _
                             CDbl(inventoryData(i, COLUMN_INVENTORY_STOCK_PRICE_BEGIN))) ' Use the defined constant
            remainingStock = CDbl(inventoryData(i, COLUMN_INVENTORY_REMAINING_STOCK)) ' Use the defined constant
            totalPayment = importQuantity * stockPrice
            itemBarcode = barcode
            classification = inventoryData(i, COLUMN_INVENTORY_ITEM_CLASS)
            status = ws.Cells(1, IMPORT_STATUS_NOT_UPDATE).Value
            donVi = inventoryData(i, COLUMN_INVENTORY_ITEM_UNIT)
            
            ' Populate the form fields
            Me.cmbItemName.Value = itemName
            Me.txtItemCode.Value = itemCode
            Me.cmbItemClass.Value = classification
            Me.txtQuantity.Value = importQuantity
            Me.txtPrice.Value = Format(stockPrice, "#,###")
            Me.txtDonVi.Value = donVi
            foundItem = True
            Exit For
        End If
    Next i
    
   ' Check if item already exists in the Dictionary
    If cartDict.Exists(itemCode) Then
    Dim existingData As Variant
        existingData = cartDict(itemCode)
        existingData(7) = existingData(7) + quantity ' Update import quantity
        existingData(9) = existingData(7) * price ' Update total payment
        cartDict(itemCode) = existingData
    Else
        cartDict.Add inventoryData(i, COLUMN_INVENTORY_ITEM_CODE), Array(Date, "", classification, itemCode, itemBarcode, itemName, donVi, importQuantity, stockPrice, stockPrice * importQuantity, status)  ' Add to cartDict
    End If
    
    ' Update ListBox
    UpdateListBox
    UpdateTotalPayment

    If Not foundItem Then
        ' Barcode not found, prompt user
        Dim response As VbMsgBoxResult
        response = MsgBox("Barcode not found! Would you like to create a new product line?", vbYesNo + vbQuestion, "Product Not Found")
        
        If response = vbYes Then
            ' Clear fields for new product entry
            Me.cmbItemName.Value = ""
            Me.txtItemCode.Value = ""
            Me.cmbItemClass.Value = ""
            Me.txtQuantity.Value = ""
            Me.txtPrice.Value = ""
            Me.txtDonVi.Value = ""
            Me.cmbItemName.SetFocus
        Else
            MsgBox "Please use the find function to locate the item.", vbInformation, "Find Item"
            Me.txtFindItem.SetFocus
        End If
    End If
End Sub
Private Sub AddToCart_Click()
    ' Validate if all fields are filled
    If Me.cmbItemClass.Value = "" Or Me.txtItemCode.Value = "" Or Me.cmbItemName.Value = "" Or Me.txtPrice.Value = "" Or Me.txtQuantity.Value = "" Or Me.txtDonVi.Value = "" Then
        MsgBox "Error 1: Please fill in all the information."
        Exit Sub
    End If
    
    ' Get the values from the form
    Dim classification As String
    Dim itemCode As String
    Dim itemName As String
    Dim itemBarcode As String
    Dim stockPrice As Double
    Dim importQuantity As Integer
    Dim donVi As String
    Dim status As String
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets(1)
    
    ' Get the multiplier from the ComboBox
    'Dim multiplier As Integer
    'Select Case Me.cmbMultiplier.Value
     '   Case "(ngan)"
      '      multiplier = 1000
       ' Case "(trieu)"
        '    multiplier = 1000000
        ' You can add more cases for other options if needed
    'End Select
    
    If Me.cmbItemClass.Value = "KHÁC" Then
        itemCode = Me.txtItemCode.Value
    Else
        itemCode = Me.cmbItemClass.Value & ExtractNumericPart(Me.txtItemCode.Value)
    End If
    
    classification = Me.cmbItemClass.Value
    itemName = Me.cmbItemName.Value
    stockPrice = Me.txtPrice.Value
    importQuantity = CInt(Me.txtQuantity.Value)
    donVi = Me.txtDonVi.Value
    status = ws.Cells(1, IMPORT_STATUS_NOT_UPDATE).Value
    
    ' Check if item already exists in the Dictionary
    If cartDict.Exists(itemCode) Then
        
    Dim existingData As Variant
    
        existingData = cartDict(itemCode)
        existingData(7) = existingData(7) + importQuantity ' Update import quantity
        existingData(9) = existingData(7) * stockPrice ' Update total payment
        cartDict(itemCode) = existingData
    Else
       cartDict.Add itemCode, Array(Date, "", classification, itemCode, itemBarcode, itemName, donVi, importQuantity, stockPrice, stockPrice * importQuantity, status)  ' Add to cartDict
    End If
    ' Update ListBox
    UpdateListBox
    UpdateTotalPayment
    
    ' Clear the input fields after submitting
    'Me.cmbItemName.Value = ""
    'Me.txtItemCode.Value = ""
    'Me.cmbItemClass.Value = ""
    Me.txtQuantity.Value = ""
    'Me.txtPrice.Value = ""
    'Me.txtDonVi.Value = ""
       

    'MsgBox "Done!!!"
End Sub
Private Sub DoneButton_Click()
    ' Logic to input results into the Import Excel sheet
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets(1) ' Replace with your actual sheet name
    
    Dim lastRow As Long
    lastRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row + 1

    Dim item As Variant
    For Each item In cartDict.Keys
        ws.Cells(lastRow, COLUMN_IMPORT_DATE).Value = item(0) ' Date
        ws.Cells(lastRow, COLUMN_IMPORT_DATE_UPDATE).Value = "" ' Update date
        ws.Cells(lastRow, COLUMN_IMPORT_ITEM_CLASS).Value = item(2) ' Classification
        ws.Cells(lastRow, COLUMN_IMPORT_ITEM_CODE).Value = item(3) ' Item Code
        ws.Cells(lastRow, COLUMN_IMPORT_ITEM_BARCODE).Value = item(4) ' Item Barcode
        ws.Cells(lastRow, COLUMN_IMPORT_ITEM_NAME).Value = item(5) ' Item Name
        ws.Cells(lastRow, COLUMN_IMPORT_ITEM_UNIT).Value = item(6) ' Unit
        ws.Cells(lastRow, COLUMN_IMPORT_QUANTITY).Value = item(7) ' Quantity
        ws.Cells(lastRow, COLUMN_IMPORT_UNIT_PRICE).Value = item(8) ' Price
        ws.Cells(lastRow, COLUMN_IMPORT_STATUS).Value = ws.Cells(1, IMPORT_STATUS_NOT_UPDATE).Value ' Status
        lastRow = lastRow + 1
    Next item

    ' Clear the cart after submission
    cartDict.RemoveAll
    Me.listCart.Clear
    

    MsgBox "Import completed successfully!"
End Sub
Private Sub UpdateTotalPayment()
    Dim total As Double
    Dim i As Integer

    For i = 0 To listCart.ListCount - 1
        total = total + (listCart.List(i, 1) * CDbl(listCart.List(i, 2)))
    Next i

    lblTotal.Caption = "T" & ChrW(7893) & "ng c" & ChrW(7897) & "ng: " & Format(total, "#,### VND")
End Sub
Private Sub btnDelete_Click()
    If listCart.ListIndex = -1 Then
        MsgBox "Please select an item to remove from the cart.", vbExclamation, "No Item Selected"
        Exit Sub
    End If

    Dim itemName As String
    itemName = listCart.List(listCart.ListIndex, 0) ' Get selected item name

    ' Remove item from Dictionary
    If cartDict.Exists(itemName) Then
        cartDict.Remove itemName
    End If

    listCart.RemoveItem listCart.ListIndex
    UpdateTotalPayment
End Sub
Private Sub UpdateListBox()
    listCart.Clear
    Dim item As Variant
    For Each item In cartDict.Keys
        With listCart
            .AddItem cartDict(item)(5) ' Item Name
            .List(.ListCount - 1, 1) = cartDict(item)(7) ' Import Quantity
            .List(.ListCount - 1, 2) = Format(cartDict(item)(8), "#,###") ' Sell Price
            .List(.ListCount - 1, 3) = Format(cartDict(item)(9), "#,###") ' Total Payment
        End With
    Next item
End Sub
