Option Explicit

' Constants for column in inventory
Private Const COLUMN_INVENTORY_ITEM_CLASS As Integer = 1
Private Const COLUMN_INVENTORY_ITEM_CODE As Integer = 2
Private Const COLUMN_INVENTORY_ITEM_BARCODE As Integer = 3
Private Const COLUMN_INVENTORY_ITEM_NAME As Integer = 4
Private Const COLUMN_INVENTORY_ITEM_UNIT As Integer = 5
Private Const COLUMN_INVENTORY_STOCK_PRICE_BEGIN As Integer = 10
Private Const COLUMN_INVENTORY_VN_PRICE As Integer = 13
Private Const COLUMN_INVENTORY_FOREIGN_PRICE As Integer = 14
Private Const COLUMN_INVENTORY_REMAINING_STOCK As Integer = 16
Private Const COLUMN_INVENTORY_STOCK_PRICE_END As Integer = 17

'Constants for column in import
Private Const COLUMN_IMPORT_DATE As Integer = 1
Private Const COLUMN_IMPORT_DATE_UPDATE As Integer = 2
Private Const COLUMN_IMPORT_ITEM_CLASS As Integer = 3
Private Const COLUMN_IMPORT_ITEM_CODE As Integer = 4
Private Const COLUMN_IMPORT_ITEM_BARCODE As Integer = 5
Private Const COLUMN_IMPORT_ITEM_NAME As Integer = 6
Private Const COLUMN_IMPORT_ITEM_UNIT As Integer = 7
Private Const COLUMN_IMPORT_QUANTITY As Integer = 8
Private Const COLUMN_IMPORT_UNIT_PRICE As Integer = 9
Private Const COLUMN_IMPORT_STATUS As Integer = 11
Private Const IMPORT_STATUS_NOT_UPDATE As Integer = 15

Private inventoryData As Variant ' Global variable to store inventory data
Private cartDict As Object
Private barcode As String


Private Sub UserForm_Initialize()
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets(1) ' Replace "Sheet3" with the name of your worksheet

    Dim lastRow As Long
    lastRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row
    
    Dim classificationRange As Range
    Set classificationRange = ws.Range("A2:A" & lastRow)
    
    Me.cmbItemClass.Clear ' Clear any existing items
    
    Dim cell As Range
    For Each cell In classificationRange
        Me.cmbItemClass.AddItem cell.Value
    Next cell
    
    ' Add options to the ComboBox
    Me.cmbMultiplier.AddItem "(ngan)"
    Me.cmbMultiplier.AddItem "(trieu)"
    
    ' Add "Other" as an option in the ComboBox
    'Me.cmbItemClass.AddItem "KHÁC"
    
    SetupListBox
    LoadInventoryData
End Sub
Private Sub SetupListBox()
    With listCart
        .ColumnCount = 4
        .ColumnWidths = "230;60;70;100"
    End With
End Sub
Private Sub LoadInventoryData()
    ' Get the path to the inventory file
    Dim inventoryPath As String
    inventoryPath = ThisWorkbook.Path & "\Minimart 69 - 2025 - Hang ton kho.xlsm"

    ' Open the inventory workbook
    Dim inventoryWorkbook As Workbook
    Set inventoryWorkbook = Workbooks.Open(inventoryPath)

    ' Set the inventory data array
    inventoryData = inventoryWorkbook.Sheets(1).Range("A6:S" & _
        inventoryWorkbook.Sheets(1).Cells(inventoryWorkbook.Sheets(1).Rows.Count, 1).End(xlUp).Row).Value

    ' Close the inventory workbook
    'inventoryWorkbook.Close SaveChanges:=False
End Sub
Private Sub FindButton_Click()
    ' Validate if the search term is entered
    If Me.txtFindItem.Value = "" Then
        MsgBox "Error 1: Please fill in all the information"
        Exit Sub
    End If

    ' Get the search term entered by the user
    Dim searchItem As String
    searchItem = Me.txtFindItem.Value
    
    ' Find the item details in the imported inventory data
    Dim matchingItems As Collection ' Use a collection to store matching item names
    Set matchingItems = New Collection
    
    Dim i As Long
    For i = LBound(inventoryData, 1) To UBound(inventoryData, 1)
        If InStr(1, inventoryData(i, COLUMN_INVENTORY_ITEM_NAME), searchItem, vbTextCompare) > 0 Then
            ' Partial match found, add the item name to the collection
            On Error Resume Next ' Ignore errors if the same name is added more than once
            matchingItems.Add inventoryData(i, COLUMN_INVENTORY_ITEM_NAME)
            On Error GoTo 0
        End If
    Next i
    
    If matchingItems.Count = 0 Then
        ' Item not found
        MsgBox "Error 2: Item not found!"
                
    Else
        
        ' Item found
        ' Clear existing items in cmbItemName
        Me.cmbItemName.Clear
        
        ' Populate cmbItemName combo box with matching item names
        Dim itemName As Variant
        For Each itemName In matchingItems
            Me.cmbItemName.AddItem itemName
        Next itemName
        
        ' Set the first matching item as the selected item in cmbItemName
        Me.cmbItemName.ListIndex = 0
        
        ' Update corresponding fields based on the selected item
        UpdateFieldsForSelectedName
    End If

    ' Enable the submit button
    Me.Findbutton.Enabled = True
End Sub
Private Sub cmbItemName_Change()
    ' Update corresponding fields based on the selected item in cmbItemName
    UpdateFieldsForSelectedName
End Sub
Private Sub UpdateFieldsForSelectedName()
    ' Get the selected item name from cmbItemName
    Dim selectedName As String
    selectedName = Me.cmbItemName.Value

    Dim i As Long
    For i = LBound(inventoryData, 1) To UBound(inventoryData, 1)
        If InStr(1, inventoryData(i, COLUMN_INVENTORY_ITEM_NAME), selectedName, vbTextCompare) > 0 Then
            ' Item found
            ' Update corresponding fields
            Me.cmbItemClass.Value = inventoryData(i, COLUMN_INVENTORY_ITEM_CLASS)
            Me.txtItemCode.Value = inventoryData(i, COLUMN_INVENTORY_ITEM_CODE)
            Me.txtPrice.Value = inventoryData(i, COLUMN_INVENTORY_STOCK_PRICE_END) / 1000 ' Assuming import price is at index 5
            Me.txtDonVi.Value = inventoryData(i, COLUMN_INVENTORY_ITEM_UNIT)
            Exit For
        End If
    Next i

End Sub
Function ExtractNumericPart(inputString As String) As String
    Dim numericPart As String
    Dim i As Integer
    
    numericPart = ""
    
    ' Iterate through each character in the input string
    For i = 1 To Len(inputString)
        ' Check if the character is a numeric digit
        If IsNumeric(Mid(inputString, i, 1)) Then
            ' Append the numeric digit to the numeric part string
            numericPart = numericPart & Mid(inputString, i, 1)
        End If
    Next i
    
    ' Return the extracted numeric part as a string
    ExtractNumericPart = numericPart
End Function
Private Sub txtBarcode_Change()
    barcode = Trim(Me.txtBarcode.Value) ' Store the barcode in a module-level variable
    
    If barcode = "" Then Exit Sub
    If UBound(inventoryData) = 0 Then LoadInventoryData

    ' Introduce a delay using a loop
    Dim startTime As Double
    startTime = Timer ' Get the current time in seconds

    ' Wait for 0.25 seconds while allowing other events to process
    Do While Timer < startTime + 0.25
        DoEvents ' Allow other events to be processed
    Loop

    ' Call the barcode processing function
    ProcessBarcode
End Sub
Public Sub ProcessBarcode()
    Dim foundItem As Boolean
    foundItem = False
    Dim i As Integer
    Dim itemName As String, totalPayment As Double
    
    For i = LBound(inventoryData, 1) To UBound(inventoryData, 1)
        If Trim(inventoryData(i, COLUMN_ITEM_BARCODE)) = barcode Then
            itemName = inventoryData(i, COLUMN_ITEM_NAME)
            Dim stockPrice As Double
            Dim remainingStock As Double
            Dim importQuantity As Double
            
            importQuantity = 1
            stockPrice = IIf(IsEmpty(inventoryData(i, COLUMN_STOCK_PRICE)), _
                             CDbl(inventoryData(i, COLUMN_STOCK_PRICE_END)), _
                             CDbl(inventoryData(i, COLUMN_STOCK_PRICE))) ' Use the defined constant
            remainingStock = CDbl(inventoryData(i, COLUMN_REMAINING_STOCK)) ' Use the defined constant
            totalPayment = importQuantity * stockPrice
            
            ' Populate the form fields
            Me.cmbItemName.Value = itemName
            Me.txtItemCode.Value = inventoryData(i, COLUMN_INVENTORY_ITEM_CODE)
            Me.cmbItemClass.Value = inventoryData(i, COLUMN_INVENTORY_ITEM_CLASS)
            Me.txtQuantity.Value = importQuantity
            Me.txtPrice.Value = Format(stockPrice, "#,###")
            Me.txtDonVi.Value = inventoryData(i, COLUMN_INVENTORY_ITEM_UNIT)
            foundItem = True
            Exit For
        End If
    Next i

    If Not foundItem Then
        ' Barcode not found, prompt user
        Dim response As VbMsgBoxResult
        response = MsgBox("Barcode not found! Would you like to create a new product line?", vbYesNo + vbQuestion, "Product Not Found")
        
        If response = vbYes Then
            ' Clear fields for new product entry
            Me.cmbItemName.Value = ""
            Me.txtItemCode.Value = ""
            Me.cmbItemClass.Value = ""
            Me.txtQuantity.Value = ""
            Me.txtPrice.Value = ""
            Me.txtDonVi.Value = ""
            Me.cmbItemName.SetFocus
        Else
            MsgBox "Please use the find function to locate the item.", vbInformation, "Find Item"
            Me.txtFindItem.SetFocus
        End If
    End If
End Sub
Private Sub AddToCart_Click()
    ' Validate if all fields are filled
    If Me.cmbItemClass.Value = "" Or Me.txtItemCode.Value = "" Or Me.cmbItemName.Value = "" Or Me.txtPrice.Value = "" Or Me.txtQuantity.Value = "" Or Me.txtDonVi.Value = "" Then
        MsgBox "Error 1: Please fill in all the information."
        Exit Sub
    End If
    
    ' Get the values from the form
    Dim classification As String
    Dim itemCode As String
    Dim itemName As String
    Dim price As Double
    Dim quantity As Integer
    Dim donVi As String
    
    ' Get the multiplier from the ComboBox
    'Dim multiplier As Integer
    'Select Case Me.cmbMultiplier.Value
     '   Case "(ngan)"
      '      multiplier = 1000
       ' Case "(trieu)"
        '    multiplier = 1000000
        ' You can add more cases for other options if needed
    'End Select
    
    If Me.cmbItemClass.Value = "KHÁC" Then
        itemCode = Me.txtItemCode.Value
    Else
        itemCode = Me.cmbItemClass.Value & ExtractNumericPart(Me.txtItemCode.Value)
    End If
    
    classification = Me.cmbItemClass.Value
    itemName = Me.cmbItemName.Value
    price = Me.txtPrice.Value * 1000
    quantity = CInt(Me.txtQuantity.Value)
    donVi = Me.txtDonVi.Value
    Status = ws.Cells(1, IMPORT_STATUS_NOT_UPDATE).Value
    
    ' Add the item to the cartDict with all relevant information
    Dim newItem As Variant
    newItem = Array(Date, "", classification, itemCode, itemBarcode, itemName, donVi, quantity, price, price * quantity, Status) ' Include all necessary fields
    cartDict.Add itemCode, newItem ' Add to cartDict
    
    ' Update ListBox
    UpdateListBox

    ' Clear the input fields after submitting
    Me.cmbItemName.Value = ""
    Me.txtItemCode.Value = ""
    Me.cmbItemClass.Value = ""
    Me.txtQuantity.Value = ""
    Me.txtPrice.Value = ""
    Me.txtDonVi.Value = ""
    
    ' Get the last used row in Sheet1
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets(1) ' Replace "Sheet1" with the name of your data sheet
    
    Dim lastRow As Long
    lastRow = ws.Cells(ws.Rows.Count, 3).End(xlUp).Row + 1
    
    ' Check if the Item Code already exists with a different Item Name
    Dim searchItemCode As String
    searchItemCode = Me.txtItemCode.Value ' Assuming cmbItemClass contains the searchItemCode
    
    Dim itemFound As Boolean
    itemFound = False
    Dim historicalName As String
    
    For i = LBound(inventoryData, 1) To UBound(inventoryData, 1)
        If searchItemCode = inventoryData(i, COLUMN_INVENTORY_ITEM_CODE) Then ' Assuming Item Code is in the fourth column (index 2) of inventoryData
            If inventoryData(i, COLUMN_INVENTORY_ITEM_NAME) <> Me.cmbItemName.Value Then ' Assuming Item Name is in the fifth column (index 3) of inventoryData
                itemFound = True
                historicalName = inventoryData(i, COLUMN_INVENTORY_ITEM_CODE) ' Store the historical name
                Exit For
            End If
        End If
    Next i
    
    ' If Item Code is found with a different Item Name, prompt for Item Name
    If itemFound Then
        ' Extract the highest numerical code for the classification
        Dim highestNumericalCode As String
        For i = LBound(inventoryData, 1) To UBound(inventoryData, 1)
            If cmbItemClass = inventoryData(i, 1) Then ' Classification in UserForm = Classification in Inventory
                
                ' Update the highest numerical code if the current one is higher
                If inventoryData(i, COLUMN_INVENTORY_ITEM_CODE) > highestNumericalCode Then
                    highestNumericalCode = inventoryData(i, COLUMN_INVENTORY_ITEM_CODE)
                End If
            End If
        Next i
        
        'Debug.Print (cmbItemClass)
        'Debug.Print (highestNumericalCode)
        MsgBox "Error 3: Item Code already exists with a different name. The historical name is: " & historicalName & vbNewLine & "The highest numerical code for this classification is: " & highestNumericalCode
        Me.txtItemCode.Value = cmbItemClass.Value & ExtractNumericPart(highestNumericalCode) + 1
        Me.txtItemCode.SetFocus
        Exit Sub
    End If
    
    
    'Check if the Item Name already exists with a different Item Code
    Dim itemNameFound As Boolean
    itemNameFound = False
    Dim historicalCode As String ' Variable to store historical code in inventory data
    
    For i = LBound(inventoryData, 1) To UBound(inventoryData, 1)
        If Me.cmbItemName.Value = inventoryData(i, 3) Then ' Assuming Item Name is in the third column (index 3) of inventoryData
            If inventoryData(i, 2) <> Me.txtItemCode.Value Then ' Assuming Item Code is in the second column (index 2) of inventoryData
                itemNameFound = True
                historicalCode = inventoryData(i, 2) ' Store the historical code in inventory data
                Exit For
            End If
        End If
    Next i
    
    ' If Item Name is found with a different Item Code, prompt for Item Code
    If itemNameFound Then
        MsgBox "Error 4: Item Name already exists with a different Item Code. The historical code is: " & historicalCode
        txtItemCode.Value = historicalCode
        txtItemCode.SetFocus
        Exit Sub
    End If

    
    ' Add the form entries to the table
    ws.Cells(lastRow, COLUMN_IMPORT_DATE).Value = Date
    ws.Cells(lastRow, COLUMN_IMPORT_ITEM_CLASS).Value = classification
    ws.Cells(lastRow, COLUMN_IMPORT_ITEM_CODE).Value = itemCode
    ws.Cells(lastRow, COLUMN_IMPORT_ITEM_NAME).Value = itemName
    ws.Cells(lastRow, COLUMN_IMPORT_ITEM_UNIT).Value = donVi
    ws.Cells(lastRow, COLUMN_IMPORT_QUANTITY).Value = quantity
    ws.Cells(lastRow, COLUMN_IMPORT_UNIT_PRICE).Value = price
    ws.Cells(lastRow, 10).Value = price * quantity
    ws.Cells(lastRow, COLUMN_IMPORT_STATUS).Value = ws.Cells(1, IMPORT_STATUS_NOT_UPDATE).Value
        
    ' Clear the input fields after submitting
    Me.txtItemCode.Value = ExtractNumericPart(Me.txtItemCode.Value) + 1
    'Me.txtItemName.Value = ""
    Me.txtPrice.Value = ""
    Me.txtQuantity.Value = ""
    'Me.txtDonVi.Value = ""

    'MsgBox "Done!!!"
End Sub
Private Sub DoneButton_Click()
    ' Logic to input results into the Import Excel sheet
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets(1) ' Replace with your actual sheet name
    
    Dim lastRow As Long
    lastRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row + 1

    Dim item As Variant
    For Each item In cartDict.Keys
        ws.Cells(lastRow, COLUMN_IMPORT_DATE).Value = item(0) ' Date
        ws.Cells(lastRow, COLUMN_IMPORT_DATE_UPDATE).Value = Date ' Update date
        ws.Cells(lastRow, COLUMN_IMPORT_ITEM_CLASS).Value = item(2) ' Classification
        ws.Cells(lastRow, COLUMN_IMPORT_ITEM_CODE).Value = item(3) ' Item Code
        ws.Cells(lastRow, COLUMN_IMPORT_ITEM_BARCODE).Value = item(4) ' Item Barcode
        ws.Cells(lastRow, COLUMN_IMPORT_ITEM_NAME).Value = item(5) ' Item Name
        ws.Cells(lastRow, COLUMN_IMPORT_ITEM_UNIT).Value = item(6) ' Unit
        ws.Cells(lastRow, COLUMN_IMPORT_QUANTITY).Value = item(7) ' Quantity
        ws.Cells(lastRow, COLUMN_IMPORT_UNIT_PRICE).Value = item(8) ' Price
        ws.Cells(lastRow, COLUMN_IMPORT_STATUS).Value = ws.Cells(1, IMPORT_STATUS_NOT_UPDATE).Value ' Status
        lastRow = lastRow + 1
    Next item

    ' Clear the cart after submission
    cartDict.RemoveAll
    Me.listCart.Clear
    UpdateTotalPayment

    MsgBox "Import completed successfully!"
End Sub
Private Sub UpdateTotalPayment()
    Dim total As Double
    Dim i As Integer

    For i = 0 To listCart.ListCount - 1
        total = total + (listCart.List(i, 1) * CDbl(listCart.List(i, 2)))
    Next i

    lblTotal.Caption = "T" & ChrW(7893) & "ng c" & ChrW(7897) & "ng: " & Format(total, "#,### VND")
End Sub
